                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f64803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80c801000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #Zhao Haoru
                            | #520021910352
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 71c701000000000000   | 	jle Done
0x048: c0f2fbffffffffffffff | 	iaddq $-5, %rdx
0x052: 766e00000000000000   | 	jg Loop
0x05b: c0f20500000000000000 | 	iaddq $5, %rdx
0x065: 707701000000000000   | 	jmp Single_Loop		# if so, goto Pre_handle:
                            | 
0x06e:                      | Loop:	
0x06e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x078: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x082: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x084: 719700000000000000   | 	jle Loop1		# if so, goto Npos:
0x08d: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x097:                      | Loop1:
0x097: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x0a1: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x0ab: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ad: 71c000000000000000   | 	jle Loop2		# if so, goto Npos:
0x0b6: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x0c0:                      | Loop2:
0x0c0: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0ca: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0d4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0d6: 71e900000000000000   | 	jle Loop3		# if so, goto Npos:
0x0df: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x0e9:                      | Loop3:
0x0e9: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x0f3: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0fd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ff: 711201000000000000   | 	jle Loop4		# if so, goto Npos:
0x108: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x112:                      | Loop4:
0x112: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x11c: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x126: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x128: 713b01000000000000   | 	jle Npos		# if so, goto Npos:
0x131: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
                            | 
0x13b:                      | Npos:	
0x13b: c0f72800000000000000 | 	iaddq $40, %rdi
0x145: c0f62800000000000000 | 	iaddq $40, %rsi
0x14f: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x151: 73c701000000000000   | 	je Done
0x15a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx
0x164: 766e00000000000000   | 	jg Loop			# if so, goto Loop:
0x16d: c0f20500000000000000 | 	iaddq $5, %rdx
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
                            | 
0x177:                      | Single_Loop:
0x177: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x181: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x18b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x18d: 71a001000000000000   | 	jle Judge		# if so, goto Npos:
                            | 	# irmovq $1, %r10
                            | 	# addq %r10, %rax		# count++
0x196: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x1a0:                      | Judge:
0x1a0: c0f70800000000000000 | 	iaddq $8, %rdi
0x1aa: c0f60800000000000000 | 	iaddq $8, %rsi
0x1b4: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1be: 767701000000000000   | 	jg Single_Loop
                            | 
0x1c7:                      | Done:
0x1c7: 90                   | 	ret
                            | 
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c8:                      | End:
                            | #/* $end ncopy-ys */
0x1c8:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x1c8:                      | check:
                            | 	# Return value test
0x1c8: 30fa0000000000000000 | 	irmovq $0,%r10
0x1d2: 61a0                 | 	subq %r10,%rax
0x1d4: 73f001000000000000   | 	je checkb
0x1dd: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x1e7: 702e03000000000000   | 	jmp cdone
0x1f0:                      | checkb:
                            | 	# Code length check
0x1f0: 30f0c801000000000000 | 	irmovq EndFun,%rax
0x1fa: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x204: 6120                 | 	subq %rdx,%rax
0x206: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x210: 6102                 | 	subq %rax,%rdx
0x212: 752e02000000000000   | 	jge checkm
0x21b: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x225: 702e03000000000000   | 	jmp cdone
0x22e:                      | checkm:
0x22e: 30f24803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x238: 30f33003000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x242: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x24c: 6277                 | 	andq %rdi,%rdi
0x24e: 73ac02000000000000   | 	je checkpre         # Skip check if count = 0
0x257:                      | mcloop:
0x257: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x261: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x26b: 6160                 | 	subq %rsi,%rax
0x26d: 738902000000000000   | 	je  mok
0x276: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x280: 702e03000000000000   | 	jmp cdone
0x289:                      | mok:
0x289: 30f00800000000000000 | 	irmovq $8,%rax
0x293: 6002                 | 	addq %rax,%rdx	  # dest ++
0x295: 6003                 | 	addq %rax,%rbx    # src++
0x297: 30f00100000000000000 | 	irmovq $1,%rax
0x2a1: 6107                 | 	subq %rax,%rdi    # cnt--
0x2a3: 765702000000000000   | 	jg mcloop
0x2ac:                      | checkpre:
                            | 	# Check for corruption
0x2ac: 30f24003000000000000 | 	irmovq Predest,%rdx
0x2b6: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x2c0: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x2ca: 6120                 | 	subq %rdx,%rax
0x2cc: 73e802000000000000   | 	je checkpost
0x2d5: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x2df: 702e03000000000000   | 	jmp cdone
0x2e8:                      | checkpost:
                            | 	# Check for corruption
0x2e8: 30f24803000000000000 | 	irmovq Postdest,%rdx
0x2f2: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x2fc: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x306: 6120                 | 	subq %rdx,%rax
0x308: 732403000000000000   | 	je checkok
0x311: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x31b: 702e03000000000000   | 	jmp cdone
0x324:                      | checkok:
                            | 	# Successful checks
0x324: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x32e:                      | cdone:
0x32e: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x330:                      | 	.align 8
0x330:                      | src:
0x330: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x340:                      | 	.align 16
0x340:                      | Predest:
0x340: fadebc0000000000     | 	.quad 0xbcdefa
0x348:                      | dest:
0x348:                      | Postdest:
0x348: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x350:                      | .align 8
                            | # Run time stack
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
                            | 
0x3d0:                      | Stack:
